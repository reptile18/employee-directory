{"version":3,"sources":["components/EmployeeRow/index.js","components/EmployeeSortableColumn/index.js","components/EmployeeTable/index.js","components/EmployeeSearch/index.js","components/EmployeeDirectory/index.js","App.js","serviceWorker.js","index.js"],"names":["EmployeeRow","props","scope","number","className","src","photo","alt","firstName","lastName","phone","cell","email","city","stateCode","styles","sortedColumn","fontDecoration","unsortedColumn","extremeLightText","color","EmployeeSortableColumn","this","sorted","sortDir","style","onClick","onSort","columnKey","onMouseOver","onHover","onMouseOut","onUnhover","label","sortIcon","React","Component","EmployeeTable","useState","employees","setEmployees","sortBy","setSortBy","setSortDir","stateToStateCode","state","setSort","key","isSortedBy","sort","firstEmp","secondEmp","sortKey","posDot","indexOf","firstKey","substring","secondKey","length","index","localeCompare","useEffect","axios","get","count","then","res","data","results","map","employee","filter","name","last","toLowerCase","includes","first","location","toUpperCase","picture","thumbnail","EmployeeSearch","id","type","placeholder","onChange","jumbotron","backgroundImage","backgroundSize","backgroundPosition","backgroundFilter","jumboHeader","fontWeight","EmployeeDirectory","filterTo","event","setState","target","value","setCount","renderCountButton","App","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6316aef9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction EmployeeRow(props) {\r\n  return (\r\n    <tr>\r\n      <th scope=\"row\">{props.number}</th>\r\n      <td className=\"d-none d-xl-table-cell\"><img className=\"thumbnail\" src={props.photo} alt={`${props.firstName} ${props.lastName}`}></img></td>\r\n      <td>{props.lastName}</td>\r\n      <td>{props.firstName}</td>\r\n      <td className=\"d-none d-md-table-cell\">{props.phone}</td>\r\n      <td className=\"d-none d-lg-table-cell\">{props.cell}</td>\r\n      <td className=\"d-none d-xl-table-cell\">{props.email}</td>\r\n      <td>{props.city}, {props.stateCode}</td>\r\n    </tr>\r\n  )\r\n}\r\n\r\nexport default EmployeeRow","import React from 'react';\r\nimport './style.css';\r\n\r\nconst styles = {\r\n  sortedColumn: {\r\n    fontDecoration: \"underline\"\r\n  },\r\n  unsortedColumn: {\r\n    fontDecoration: \"none\"\r\n  },\r\n  extremeLightText: {\r\n    color: \"#CCC\"\r\n  }\r\n}\r\n\r\nexport default class EmployeeSortableColumn extends React.Component {\r\n  sortIcon() {\r\n    if (this.props.sorted) {\r\n      return <i className={`fas fa-sort-${this.props.sortDir}`}></i>\r\n    }\r\n    else {\r\n      return <i style={styles.extremeLightText} className=\"fas fa-sort\"></i>\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <th\r\n        scope=\"col\"\r\n        onClick={() => {this.props.onSort(this.props.columnKey)}}\r\n        onMouseOver={this.onHover}\r\n        onMouseOut={this.onUnhover  }\r\n      >\r\n        <span \r\n          className=\"sortableColumn\"\r\n          style={styles.unsortedColumn}\r\n        >{this.props.label}&nbsp;{this.sortIcon()}</span>\r\n      </th>\r\n    )\r\n  }\r\n}","import React, {useState, useEffect} from 'react';\r\nimport axios from 'axios';\r\n\r\nimport EmployeeRow from '../EmployeeRow';\r\nimport EmployeeSortableColumn from '../EmployeeSortableColumn';\r\n\r\nfunction EmployeeTable(props) {\r\n  const [employees, setEmployees] = useState([]);\r\n  const [sortBy, setSortBy] = useState(\"\");\r\n  const [sortDir, setSortDir] = useState(\"up\");\r\n\r\n  useEffect(() => {\r\n    axios.get(`https://randomuser.me/api/?results=${props.count}&nat=us`).then(res => {\r\n      setEmployees(res.data.results.map((employee, index) => {\r\n          return { ...employee, index }\r\n        }))\r\n    })\r\n  }, [props.count])\r\n  function stateToStateCode(state) {\r\n    switch (state) {\r\n      case 'Alabama':\r\n        return 'AL'\r\n      case 'Alaska':\r\n        return 'AK'\r\n      case 'Arizona':\r\n        return 'AZ'\r\n      case 'Arkansas':\r\n        return 'AR'\r\n      case 'California':\r\n        return 'CA'\r\n      case 'Colorado':\r\n        return 'CO'\r\n      case 'Connecticut':\r\n        return 'CT'\r\n      case 'Delaware':\r\n        return 'DE'\r\n      case 'District of Columbia':\r\n        return 'DC'\r\n      case 'Florida':\r\n        return 'FL'\r\n      case 'Georgia':\r\n        return 'GA'\r\n      case 'Hawaii':\r\n        return 'HI'\r\n      case 'Idaho':\r\n        return 'ID'\r\n      case 'Illinois':\r\n        return 'IL'\r\n      case 'Indiana':\r\n        return 'ID'\r\n      case 'Iowa':\r\n        return 'IA'\r\n      case 'Kansas':\r\n        return 'KS'\r\n      case 'Kentucky':\r\n        return 'KY'\r\n      case 'Louisiana':\r\n        return 'LA'\r\n      case 'Maine':\r\n        return 'ME'\r\n      case 'Maryland':\r\n        return 'MD'\r\n      case 'Massachusetts':\r\n        return 'MA'\r\n      case 'Michigan':\r\n        return 'MI'\r\n      case 'Minnesota':\r\n        return 'MN'\r\n      case 'Mississippi':\r\n        return 'MS'\r\n      case 'Missouri':\r\n        return 'MO'\r\n      case 'Montana':\r\n        return 'MT'\r\n      case 'Nebraska':\r\n        return 'NE'\r\n      case 'Nevada':\r\n        return 'NV'\r\n      case 'New Hampshire':\r\n        return 'NH'\r\n      case 'New Jersey':\r\n        return 'NJ'\r\n      case 'New Mexico':\r\n        return 'NM'\r\n      case 'New York':\r\n        return 'NY'\r\n      case 'North Carolina':\r\n        return 'NC'\r\n      case 'North Dakota':\r\n        return 'ND'\r\n      case 'Ohio':\r\n        return 'OH'\r\n      case 'Oklahoma':\r\n        return 'OK'\r\n      case 'Oregon':\r\n        return 'OR'\r\n      case 'Pennsylvania':\r\n        return 'PA'\r\n      case 'Rhode Island':\r\n        return 'RI'\r\n      case 'South Carolina':\r\n        return 'SC'\r\n      case 'South Dakota':\r\n        return 'SD'\r\n      case 'Tennessee':\r\n        return 'TN'\r\n      case 'Texas':\r\n        return 'TX'\r\n      case 'Utah':\r\n        return 'UT'\r\n      case 'Vermont':\r\n        return 'VT'\r\n      case 'Virginia':\r\n        return 'VA'\r\n      case 'Washington':\r\n        return 'WA'\r\n      case 'West Virginia':\r\n        return 'WV'\r\n      case 'Wisconsin':\r\n        return 'WI'\r\n      case 'Wyoming':\r\n        return 'WY'\r\n      case 'American Samoa':\r\n        return 'AS'\r\n      case 'Guam':\r\n        return 'GU'\r\n      case 'Northern Mariana Islands':\r\n        return 'MP'\r\n      case 'Puerto Rico':\r\n        return 'PR'\r\n      case 'U.S. Virgin Islands':\r\n        return 'VI'\r\n      case 'U.S. Minor Outlying Islands':\r\n        return 'UM'\r\n      default:\r\n        return ''\r\n    }\r\n  }\r\n  function setSort (key) {\r\n    if (sortBy === key) {\r\n      if (sortDir === \"down\") {\r\n        setSortBy(\"\");\r\n        setSortDir(\"up\");\r\n      }\r\n      else {;\r\n        setSortDir(\"down\")\r\n      }\r\n    }\r\n    else {\r\n      setSortBy(key);\r\n      setSortDir(\"up\");\r\n    }\r\n  }\r\n  function isSortedBy(key) {\r\n    return sortBy === key;\r\n  }\r\n  function sort (firstEmp, secondEmp) {\r\n    const sortKey = sortBy;\r\n    const posDot = sortKey.indexOf('.');\r\n    const firstKey = sortKey.substring(0, posDot);\r\n    const secondKey = sortKey.substring(posDot + 1, sortKey.length);\r\n    if (sortBy === \"\") {\r\n      return firstEmp.index - secondEmp.index;\r\n    }\r\n    if (sortDir === \"up\") {\r\n      return firstEmp[firstKey][secondKey].localeCompare(secondEmp[firstKey][secondKey]);\r\n    }\r\n    else {\r\n      return secondEmp[firstKey][secondKey].localeCompare(firstEmp[firstKey][secondKey]);\r\n    }\r\n  }\r\n  function renderRows() {\r\n    return employees.filter(employee => {\r\n      if (employee.name.last.toLowerCase().includes(props.filter.toLowerCase()) ||\r\n        employee.name.first.toLowerCase().includes(props.filter.toLowerCase()) ||\r\n        employee.location.city.toLowerCase().includes(props.filter.toLowerCase()) ||\r\n        employee.location.state.toLowerCase().includes(props.filter.toLowerCase()) ||\r\n        stateToStateCode(employee.location.state).includes(props.filter.toUpperCase())\r\n      ) {\r\n        return true;\r\n      }\r\n      else {\r\n        return false;\r\n      }\r\n    }).sort(sort)\r\n      .map((employee, index) => {\r\n        return (\r\n          <EmployeeRow\r\n            key={index}\r\n            number={employee.index + 1}\r\n            photo={employee.picture.thumbnail}\r\n            lastName={employee.name.last}\r\n            firstName={employee.name.first}\r\n            phone={employee.phone}\r\n            cell={employee.cell}\r\n            email={employee.email}\r\n            city={employee.location.city}\r\n            stateCode={stateToStateCode(employee.location.state)}\r\n          ></EmployeeRow>\r\n        )\r\n      });\r\n  }\r\n  return (\r\n    <div className=\"container\">\r\n      <table className=\"table table-hover\">\r\n        <caption>Showing {props.count} results filtered on '{props.filter}'</caption>\r\n        <thead>\r\n          <tr>\r\n            <th scope=\"col\">#</th>\r\n            <th scope=\"col\" className=\"d-none d-xl-table-cell\">Photo</th>\r\n            <EmployeeSortableColumn\r\n              columnKey=\"name.last\"\r\n              label=\"Last&nbsp;Name\"\r\n              sorted={isSortedBy(\"name.last\")}\r\n              sortDir={sortDir}\r\n              onSort={setSort}\r\n            />\r\n            <EmployeeSortableColumn\r\n              columnKey=\"name.first\"\r\n              label=\"First&nbsp;Name\"\r\n              sorted={isSortedBy(\"name.first\")}\r\n              sortDir={sortDir}\r\n              onSort={setSort}\r\n            />\r\n            <th scope=\"col\" className=\"d-none d-md-table-cell\">Phone</th>\r\n            <th scope=\"col\" className=\"d-none d-lg-table-cell\">Cell</th>\r\n            <th scope=\"col\" className=\"d-none d-xl-table-cell\">Email</th>\r\n            <EmployeeSortableColumn\r\n              columnKey=\"location.city\"\r\n              label=\"City\"\r\n              sorted={isSortedBy(\"location.city\")}\r\n              sortDir={sortDir}\r\n              onSort={setSort}\r\n            />\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {renderRows()}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n}\r\nexport default EmployeeTable","import React from 'react';\r\n\r\nfunction EmployeeSearch(props) {\r\n  return (\r\n    <form>\r\n      <div className=\"input-group\">\r\n        <input id=\"employeeSearch\" className=\"input-group-text\" type=\"text\"\r\n          placeholder=\"Search for employee(s)\" onChange={props.onChange}/>\r\n        <div className=\"input-group-append\">\r\n          <button className=\"btn btn-dark\" type=\"submit\"><i className=\"fas fa-search\"></i></button>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  )\r\n}\r\n\r\nexport default EmployeeSearch","import React from 'react';\r\nimport EmployeeTable from '../EmployeeTable';\r\nimport EmployeeSearch from '../EmployeeSearch';\r\n\r\nconst styles = {\r\n  jumbotron: {\r\n    backgroundImage: \"url(assets/img/pexels-christina-morillo-1181304-min-halved.brightness100.jpg)\",\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center center\",\r\n    backgroundFilter: \"blur(1px)\"\r\n  },\r\n  jumboHeader: {\r\n    fontWeight: \"bolder\"\r\n  }\r\n}\r\n\r\nexport default class EmployeeDirectory extends React.Component {\r\n  state = {\r\n    filter: \"\",\r\n    count: 50\r\n  }\r\n  filterTo = (event) => {\r\n    this.setState({filter: event.target.value});\r\n  }\r\n  setCount = (count) => {\r\n    this.setState({count: count});\r\n  }\r\n  renderCountButton(count) {\r\n    return (\r\n      <button \r\n        key={count}\r\n        type=\"button\" \r\n        className={`btn btn-outline-secondary ${this.state.count === count? \"active\": \"\"}`}\r\n        onClick={() => this.setCount(count)}\r\n      >{count}</button>\r\n    )\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"jumbotron jumbotron-fluid\" style={styles.jumbotron}>\r\n          <h1 className=\"text-dark\" style={styles.jumboHeader}>Employee Directory</h1>\r\n        </div>\r\n        <div className=\"container\">\r\n          <div className=\"d-flex justify-content-end mb-3\">\r\n            <EmployeeSearch onChange={this.filterTo} />\r\n          </div>\r\n          <div className=\"d-flex justify-content-end mb-3\">\r\n            <span>Display \r\n            <div className=\"btn-group mx-2\">\r\n              {[25,50,100,200].map((count) => this.renderCountButton(count))}\r\n            </div>\r\n             results</span>\r\n          </div>\r\n          <div className=\"row\">\r\n            <div className=\"col-12\">\r\n              <EmployeeTable filter={this.state.filter} count={this.state.count} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}","import React from 'react';\nimport './App.css';\nimport EmployeeDirectory from './components/EmployeeDirectory';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <EmployeeDirectory />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}